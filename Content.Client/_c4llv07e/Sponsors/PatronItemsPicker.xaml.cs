using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client._c4llv07e.Sponsors;

[GenerateTypedNameReferences]
public sealed partial class PatronItemsPicker : Control
{
    // [Dependency] private readonly SponsorsManager _sponsorsManager = default!; //TODO BY UR
    [Dependency] private readonly IPrototypeManager _prototypeMan = default!;
    [Dependency] private readonly IResourceCache _resource = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;

    private readonly Dictionary<EntityPrototype, Texture> _cachedItems = new();

    public Action<List<string>>? ItemsChanged;
    public Action<string, string>? PetChanged;

    private ItemList.Item? _selectedUiItem;
    private ItemList.Item? _selectedUiUsedItem;
    private List<EntityPrototype> _selectedItems = [];

    private (string, string)? _selectedPet;
    private EntityUid? _dummyPetPreview;

    // private SponsorTier? _tier; //TODO BY UR

    public PatronItemsPicker()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        InitializeItems();
        InitializePets();
    }

    public void SetPatronData(List<string> selectedItems, string petId, string petName)
    {
        // _sponsorsManager.TryGetInfo(out var sponsorInfo); //TODO BY UR
        // _tier = sponsorInfo; //TODO BY UR

        SetupPatronItems(selectedItems);
        SetupPatronPets(petId, petName);
    }

    private void SetupPatronItems(List<string> selectedItems)
    {
        // var tierAvailableItems = _tier?.AvailableItems; //TODO BY UR
        // if (tierAvailableItems > 0)
        // {
        //     _selectedItems = selectedItems.Select(item => _prototypeMan.Index<EntityPrototype>(item)).ToList();
        //     UpdateAvailableItems();
        //     PopulateItems("");
        //     return;
        // }

        CPatronCategoryItems.Visible = true;
        CPatronItemsContainer.Visible = false;
    }

    private void UpdateAvailableItems()
    {
        // var availableItems = _tier?.AvailableItems - _selectedItems.Count; //TODO BY UR
        // CPatronItemsAvailableCount.Text = $"{availableItems}";
        // CPatronAddItem.Disabled = availableItems <= 0;
    }

    private void SetupPatronPets(string petId, string petName)
    {
        // if (_tier?.PetCategories.Count > 0) //TODO BY UR
        // {
        //     if (!string.IsNullOrEmpty(petId))
        //     {
        //         _selectedPet = (petId, petName);
        //         CPetName.Text = petName;
        //         UpdatePetSprite(petId);
        //     }
        //
        //     PopulatePets("");
        //     return;
        // }

        CPatronCategoryPet.Visible = true;
        CPatronPetContainer.Visible = false;
    }

    #region Items

    private void InitializeItems()
    {
        CSearch.OnTextChanged += args => PopulateItems(args.Text);

        CPatronAvailableItems.OnItemSelected += args => _selectedUiItem = CPatronAvailableItems[args.ItemIndex];
        CPatronSelectedItems.OnItemSelected += args => _selectedUiUsedItem = CPatronSelectedItems[args.ItemIndex];

        CPatronAddItem.OnPressed += _ => AddItem();
        CPatronRemoveItem.OnPressed += _ => RemoveItem();

        _prototypeMan.PrototypesReloaded += OnProtoReload;
        LoadItems();
    }

    private void OnProtoReload(PrototypesReloadedEventArgs obj)
    {
        // if (!obj.WasModified<SponsorsItems>()) //TODO BY UR
        //     return;

        LoadItems();
        PopulateItems("");
    }

    private void LoadItems()
    {
        _cachedItems.Clear();

        // var prototypes = _prototypeMan.EnumeratePrototypes<SponsorsItems>(); //TODO BY UR
        // foreach (var prototype in prototypes)
        // {
        //     foreach (var item in prototype.Items)
        //     {
        //         if (!_prototypeMan.TryIndex<EntityPrototype>(item, out var itemPrototype))
        //             continue;
        //
        //         var spriteTextures = SpriteComponent.GetPrototypeTextures(itemPrototype, _resource).First();
        //         var sprite = spriteTextures.Default;
        //
        //         _cachedItems[itemPrototype] = sprite;
        //     }
        // }
    }

    private void AddItem()
    {
        if (_selectedUiItem == null)
            return;

        CPatronAvailableItems.Remove(_selectedUiItem);

        var item = new ItemList.Item(CPatronSelectedItems)
        {
            Text = _selectedUiItem.Text,
            Icon = _selectedUiItem.Icon,
            Metadata = _selectedUiItem.Metadata
        };
        CPatronSelectedItems.Insert(0, item);

        if (item.Metadata is { } metadata)
        {
            _selectedItems.Add((EntityPrototype) metadata);
        }

        _selectedUiItem = null;

        UpdateAvailableItems();
        OnItemsChanged();
    }

    private void RemoveItem()
    {
        if (_selectedUiUsedItem == null)
            return;

        CPatronSelectedItems.Remove(_selectedUiUsedItem);

        var item = new ItemList.Item(CPatronAvailableItems)
        {
            Text = _selectedUiUsedItem.Text,
            Icon = _selectedUiUsedItem.Icon,
            Metadata = _selectedUiUsedItem.Metadata
        };
        CPatronAvailableItems.Insert(0, item);

        if (item.Metadata is { } metadata)
        {
            _selectedItems.Remove((EntityPrototype) metadata);
        }

        _selectedUiUsedItem = null;

        UpdateAvailableItems();
        OnItemsChanged();
    }

    private void OnItemsChanged()
    {
        var items = _selectedItems.Select(item => item.ID).ToList();
        ItemsChanged?.Invoke(items);
    }

    private void OnPetChanged()
    {
        if (_selectedPet is not { } pet)
            return;

        PetChanged?.Invoke(pet.Item1, pet.Item2);
    }

    private void PopulateItems(string filter)
    {
        CPatronAvailableItems.Clear();
        CPatronSelectedItems.Clear();

        foreach (var (item, sprite) in _cachedItems)
        {
            if (!string.IsNullOrEmpty(filter) && !item.Name.Contains(filter, StringComparison.OrdinalIgnoreCase))
                continue;

            var listItem = _selectedItems.Contains(item)
                ? CPatronSelectedItems.AddItem(item.Name, sprite)
                : CPatronAvailableItems.AddItem(item.Name, sprite);
            listItem.Metadata = item;
        }
    }

    #endregion

    #region Pets

    private void InitializePets()
    {
        CPetsList.OnItemSelected += OnPetSelected;
        CPetName.OnTextChanged += _ => OnPetNameChanged();
    }

    private void OnPetSelected(ItemList.ItemListSelectedEventArgs args)
    {
        var item = CPetsList[args.ItemIndex];
        if (item.Metadata is not EntityPrototype petEntity)
            return;

        _selectedPet = (petEntity.ID, CPetName.Text);
        UpdatePetSprite(petEntity.ID);
        OnPetChanged();
    }

    private void OnPetNameChanged()
    {
        if (_selectedPet == null)
            return;

        _selectedPet = (_selectedPet.Value.Item1, CPetName.Text);
        OnPetChanged();
    }

    private void UpdatePetSprite(string petId)
    {
        if (_dummyPetPreview != null)
            _entMan.DeleteEntity(_dummyPetPreview);

        _dummyPetPreview = _entMan.SpawnEntity(petId, MapCoordinates.Nullspace);
        CPetSpriteView.SetEntity(_dummyPetPreview);
    }

    private void PopulatePets(string filter)
    {
        CPetsList.Clear();

        // var prototypes = _prototypeMan.EnumeratePrototypes<SponsorPetCategory>(); //TODO BY UR
        // foreach (var category in prototypes)
        // {
        //     foreach (var petId in category.Pets)
        //     {
        //         if (!_prototypeMan.TryIndex<EntityPrototype>(petId, out var petPrototype))
        //             continue;
        //
        //         if (!petPrototype.Name.Contains(filter))
        //             continue;
        //
        //         var spriteTextures = SpriteComponent.GetPrototypeTextures(petPrototype, _resource).First();
        //         var sprite = spriteTextures.Default;
        //
        //         var item = CPetsList.AddItem(petPrototype.Name, sprite);
        //         item.Metadata = petPrototype;
        //     }
        // }
    }

    #endregion
}
