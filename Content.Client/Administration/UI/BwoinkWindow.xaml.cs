#nullable enable
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.GameObjects;
using Robust.Shared.Network;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI
{
    /// <summary>
    /// This window connects to a BwoinkSystem channel. BwoinkSystem manages the rest.
    /// </summary>
    [GenerateTypedNameReferences]
    public partial class BwoinkWindow : SS14Window
    {
        [Dependency] private readonly IEntitySystemManager _systemManager = default!;
        [Dependency] private readonly IPlayerManager _playerManager = default!;

        private readonly NetUserId _channelId;

        public BwoinkWindow(NetUserId userId, string channelName)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _channelId = userId;
            Title = (_playerManager.LocalPlayer?.UserId == _channelId) ? "Admin Message" : channelName;

            SenderLineEdit.OnTextEntered += Input_OnTextEntered;
        }

        private void Input_OnTextEntered(LineEdit.LineEditEventArgs args)
        {
            if (!string.IsNullOrWhiteSpace(args.Text))
            {
                var bwoink = _systemManager.GetEntitySystem<BwoinkSystem>();
                bwoink.Send(_channelId, args.Text);
            }

            SenderLineEdit.Clear();
        }

        public void ReceiveLine(string text)
        {
            var formatted = new FormattedMessage(1);
            formatted.AddMarkup(text);
            TextOutput.AddMessage(formatted);
        }
    }
}
