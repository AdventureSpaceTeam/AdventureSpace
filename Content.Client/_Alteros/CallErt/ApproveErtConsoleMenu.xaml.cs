using System.Linq;
using Content.Client.CallErt;
using Content.Client.GameTicking.Managers;
using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared.CallErt;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;


namespace Content.Client._Alteros.CallErt
{
    [GenerateTypedNameReferences]
    public sealed partial class ApproveErtConsoleMenu : FancyWindow
    {
        [Dependency] private readonly IGameTiming _gameTiming = default!;
        [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
        private readonly ClientGameTicker _gameTicker;

        private ApproveErtConsoleBoundUserInterface Owner { get; set; }

        public Action<int>? ApproveErt { get; set; }

        public Action<int>? DenyErt { get; set; }

        public ApproveErtConsoleMenu(ApproveErtConsoleBoundUserInterface owner)
        {
            IoCManager.InjectDependencies(this);
            _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
            RobustXamlLoader.Load(this);

            Owner = owner;

            AutomateApproveCheckBox.OnPressed += args =>
            {
                Owner.EnableAutomateApprove(AutomateApproveCheckBox.Pressed);
            };

            StationSelector.OnItemSelected += args =>
            {
                var metadata = StationSelector.GetItemMetadata(args.Id);
                if (metadata != null && metadata is int cast)
                {
                    Owner.StationSelected(cast);
                }
            };
        }

        public void UpdateCalledErtList(List<CallErtGroupEnt>? calledErts)
        {
            CallErtEntriesContainer.Children.Clear();

            if (calledErts == null)
                return;

            for (var i = 0; i < calledErts.Count; i++)
            {
                var calledErt = calledErts[i];

                if (calledErt.ErtGroupDetail == null)
                    continue;

                var entry = new CalledErtEntry(i, calledErt.ErtGroupDetail.Name, calledErt.CalledTime, calledErt.ArrivalTime, calledErt.Status, calledErt.Reason, approveErt: ApproveErt, denyErt: DenyErt, allowApprove: true);

                CallErtEntriesContainer.AddChild(entry);
            }
        }

        public void UpdateStationList(Dictionary<int, string> stations, int? selectedStation)
        {
            StationSelector.Clear();

            if (stations.Count == 0)
                return;

            selectedStation ??= stations.First().Key;

            foreach (var (stationUid, stationName) in stations)
            {
                StationSelector.AddItem(stationName);
                StationSelector.SetItemMetadata(StationSelector.ItemCount - 1, stationUid);

                if (stationUid == selectedStation)
                {
                    StationSelector.Select(StationSelector.ItemCount - 1);
                }
            }
        }

        public void UpdateAutomaticApprove(bool automateApprove)
        {
            AutomateApproveCheckBox.Pressed = automateApprove;
        }

        public void UpdateStationTime()
        {
            var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

            StationTimeLabel.SetMarkup(Loc.GetString(stationTime.ToString("hh\\:mm\\:ss")));
        }

        protected override void Draw(DrawingHandleScreen handle)
        {
            base.Draw(handle);

            var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

            StationTimeLabel.SetMarkup($"{stationTime:hh':'mm':'ss}");
        }
    }
}

