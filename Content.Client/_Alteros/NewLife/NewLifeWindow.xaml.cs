using Content.Shared.NewLife;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Alteros.NewLife
{
    [GenerateTypedNameReferences]
    public sealed partial class NewLifeWindow : DefaultWindow
    {
        private readonly IGameTiming _timing;

        private TimeSpan _nextRespawnTime = TimeSpan.Zero;

        private int _selectedCharacter;

        private List<int> _usedCharacters = new();

        public Action? SpawnRequested;

        public NewLifeWindow(IGameTiming timing)
        {
            RobustXamlLoader.Load(this);
            _timing = timing;
            Spawn.OnPressed += OnSpawnPressed;

            CharacterSelector.OnItemSelected += args =>
            {
                CharacterSelector.Select(args.Id);
                _selectedCharacter = (int) CharacterSelector.SelectedMetadata!;
            };

            RoleSelector.OnItemSelected += args =>
            {
                RoleSelector.Select(args.Id);
            };
        }

        private void OnSpawnPressed(BaseButton.ButtonEventArgs obj)
        {
            if (_usedCharacters.Contains(_selectedCharacter))
                return;
            if (_timing.CurTime < _nextRespawnTime)
                return;
            SpawnRequested?.Invoke();
        }

        public int? GetSelectedCharacter()
        {
            var characterId = (int?) CharacterSelector.SelectedMetadata;
            return characterId;
        }

        public string? GetSelectedRole()
        {
            var roleId = (string?) RoleSelector.SelectedMetadata;
            return roleId;
        }

        public void UpdateNextRespawn(TimeSpan nextRespaw)
        {
            _nextRespawnTime = nextRespaw;
        }

        public void UpdateCharactersList(List<NewLifeCharacterInfo> characters, List<int> usedCharactersForRespawn)
        {
            _usedCharacters = usedCharactersForRespawn;
            for (var i = 0; i < characters.Count; i++)
            {
                var character = characters[i];
                CharacterSelector.AddItem($"{character.Name}", i);
                CharacterSelector.SetItemMetadata(i, character.Identifier);
                if (usedCharactersForRespawn.Contains(character.Identifier))
                {
                    //CharacterSelector.SetItemDisabled(CharacterSelector.GetIdx(i), true);
                    CharacterSelector.SetItemText(CharacterSelector.GetIdx(i), Loc.GetString("new-life-gui-character-used", ("name", character.Name)));
                }
            }
        }

        public void UpdateRolesList(List<NewLifeRolesInfo> roles)
        {
            for (var i = 0; i < roles.Count; i++)
            {
                var role = roles[i];
                RoleSelector.AddItem($"{role.Name}", i);
                RoleSelector.SetItemMetadata(i, role.Identifier);
            }
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);
            if (_usedCharacters.Contains(_selectedCharacter))
            {
                Spawn.Disabled = true;
                NextRespawnLabelTitle.Text = Loc.GetString("new-life-gui-character-not-available");
                NextRespawnLabel.Visible = false;
                return;
            }

            if (_timing.CurTime < _nextRespawnTime)
            {
                Spawn.Disabled = true;
                NextRespawnLabelTitle.Text = Loc.GetString("new-life-gui-available-via");
                NextRespawnLabel.Visible = true;
                var remaining = TimeSpan.FromSeconds(Math.Max((_nextRespawnTime - _timing.CurTime).TotalSeconds, 0));
                NextRespawnLabel.Text = $" {remaining.ToString("mm':'ss")}";
                return;
            }
            Spawn.Disabled = false;
            NextRespawnLabelTitle.Text = Loc.GetString("new-life-gui-available");
            NextRespawnLabel.Visible = false;
        }
    }
}
