using Content.Client.Administration.Managers;
using Robust.Client.AutoGenerated;
using Robust.Client.Placement;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.IoC;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.Administration.UI.Tabs.AdminbusTab
{
    [GenerateTypedNameReferences]
    public partial class AdminbusTab : Control
    {
        private EntitySpawnWindow? _entitySpawnWindow;
        private TileSpawnWindow? _tileSpawnWindow;

        protected override void EnteredTree()
        {
            // For the SpawnEntitiesButton and SpawnTilesButton we need to do the press manually
            // TODO: This will probably need some command check at some point
            SpawnEntitiesButton.OnPressed += SpawnEntitiesButtonOnOnPressed;
            SpawnTilesButton.OnPressed += SpawnTilesButtonOnOnPressed;
        }

        private void SpawnEntitiesButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
        {
            var manager = IoCManager.Resolve<IAdminMenuManager>();
            _entitySpawnWindow ??= new EntitySpawnWindow(IoCManager.Resolve<IPlacementManager>(),
                IoCManager.Resolve<IPrototypeManager>(),
                IoCManager.Resolve<IResourceCache>());
            manager.OpenCommand(_entitySpawnWindow);
        }

        private void SpawnTilesButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
        {
            var manager = IoCManager.Resolve<IAdminMenuManager>();
            _tileSpawnWindow ??= new TileSpawnWindow(IoCManager.Resolve<ITileDefinitionManager>(),
                IoCManager.Resolve<IPlacementManager>(),
                IoCManager.Resolve<IResourceCache>());
            manager.OpenCommand(_tileSpawnWindow);
        }
    }
}
