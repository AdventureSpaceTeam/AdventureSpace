using System.Linq;
using Content.Client.CallErt;
using Content.Client.GameTicking.Managers;
using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared.CallErt;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;


namespace Content.Client._Alteros.CallErt
{
    [GenerateTypedNameReferences]
    public sealed partial class ApproveErtConsoleMenu : FancyWindow
    {
        [Dependency] private readonly IGameTiming _gameTiming = default!;
        [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
        [Dependency] private readonly ILocalizationManager _loc = default!;
        private readonly ClientGameTicker _gameTicker;

        private ApproveErtConsoleBoundUserInterface Owner { get; set; }

        public Action<int>? ApproveErt { get; set; }

        public Action<int>? DenyErt { get; set; }

        public Action<int>? RecallErt { get; set; }

        public ApproveErtConsoleMenu(ApproveErtConsoleBoundUserInterface owner)
        {
            IoCManager.InjectDependencies(this);
            _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
            RobustXamlLoader.Load(this);

            Owner = owner;

            AutomateApproveCheckBox.OnPressed += args =>
            {
                Owner.EnableAutomateApprove(AutomateApproveCheckBox.Pressed);
            };

            StationSelector.OnItemSelected += args =>
            {
                var metadata = StationSelector.GetItemMetadata(args.Id);
                if (metadata is not NetEntity cast)
                    return;

                Owner.StationSelected(cast);
                StationSelector.Select(args.Id);
            };

            ErtGroupSelector.OnItemSelected += args =>
            {
                var metadata = ErtGroupSelector.GetItemMetadata(args.Id);
                if (metadata is not string cast)
                    return;

                Owner.ErtGroupSelected(cast);
                ErtGroupSelector.Select(args.Id);
            };

            SendErt.OnPressed += (_) => Owner.SendErtButtonPressed();
            SendErt.Disabled = !owner.CanSendErt;
        }

        public void UpdateErtList(Dictionary<string, ErtGroupDetail> ertGroups, string? selectedErt)
        {
            ErtGroupSelector.Clear();

            if (ertGroups.Count == 0)
                return;

            selectedErt ??= ertGroups.First().Key;

            foreach (var (ertGroupName, ErtGroupDetail) in ertGroups)
            {
                var name = ertGroupName;
                if (Loc.TryGetString($"ert-group-name-{ErtGroupDetail.Name}", out var locName))
                {
                    name = locName;
                }
                ErtGroupSelector.AddItem(name);
                ErtGroupSelector.SetItemMetadata(ErtGroupSelector.ItemCount - 1, ertGroupName);

                if (ertGroupName == selectedErt)
                {
                    ErtGroupSelector.Select(ErtGroupSelector.ItemCount - 1);
                }
            }

            if (!ertGroups.TryGetValue(selectedErt, out var ertGroup))
                return;

            var humanListText = "";

            var humansCount = ertGroup.HumansList.Count;

            foreach (var (humanId, count) in ertGroup.HumansList)
            {
                humanListText += $"‚óè {_loc.GetEntityData(humanId).Name}: {count}";

                if (humansCount <= 1)
                    continue;

                humanListText += "\n";
                humansCount--;
            }

            RichTextLabelExt.SetMarkup(HumanListLabel, humanListText);

            var waitingTime = TimeSpan.FromSeconds(ertGroup.WaitingTime);

            RichTextLabelExt.SetMarkup(TimeToSpawnLabel, $"{waitingTime:hh':'mm':'ss}");
        }

        public void UpdateCalledErtList(List<CallErtGroupEnt>? calledErts)
        {
            CallErtEntriesContainer.Children.Clear();

            if (calledErts == null)
                return;

            var originalIndexes = Enumerable.Range(0, calledErts.Count).ToList();

            var sortedIndexes = originalIndexes.OrderByDescending(i => calledErts[i].CalledTime).ToList();

            foreach (var sortedIndex in sortedIndexes)
            {
                var calledErt = calledErts[sortedIndex];

                if (calledErt.ErtGroupDetail == null)
                    continue;

                var entry = new CalledErtEntry(sortedIndex,
                    calledErt.ErtGroupDetail.Name,
                    calledErt.CalledTime,
                    calledErt.ArrivalTime,
                    calledErt.Status,
                    calledErt.Reason,
                    recallErt: RecallErt,
                    approveErt: ApproveErt,
                    denyErt: DenyErt,
                    allowApprove: true);

                CallErtEntriesContainer.AddChild(entry);
            }
        }

        public void UpdateStationList(Dictionary<NetEntity, string> stations, NetEntity? selectedStation)
        {
            StationSelector.Clear();

            if (stations.Count == 0)
                return;

            selectedStation ??= stations.First().Key;

            foreach (var (stationUid, stationName) in stations)
            {
                StationSelector.AddItem(stationName);
                StationSelector.SetItemMetadata(StationSelector.ItemCount - 1, stationUid);

                if (stationUid == selectedStation)
                {
                    StationSelector.Select(StationSelector.ItemCount - 1);
                }
            }
        }

        public void UpdateAutomaticApprove(bool automateApprove)
        {
            AutomateApproveCheckBox.Pressed = automateApprove;
        }

        public void UpdateStationTime()
        {
            var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

            StationTimeLabel.SetMarkup(Loc.GetString(stationTime.ToString("hh\\:mm\\:ss")));
        }

        protected override void Draw(DrawingHandleScreen handle)
        {
            base.Draw(handle);

            var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

            StationTimeLabel.SetMarkup($"{stationTime:hh':'mm':'ss}");
        }
    }
}

