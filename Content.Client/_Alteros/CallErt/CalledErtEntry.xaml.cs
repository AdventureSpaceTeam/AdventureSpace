using Content.Shared.CallErt;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Alteros.CallErt;

[GenerateTypedNameReferences]
public sealed partial class CalledErtEntry : BoxContainer
{
    private readonly Action<int>? _recallErt;
    private readonly Action<int>? _approveErt;
    private readonly Action<int>? _denyErt;

    private const string UnknownStatus = "Неизвестно";

    public CalledErtEntry(int index, string groupTitle, TimeSpan calledTime, TimeSpan arrivalTime,
        ErtGroupStatus status, string? reason, Action<int>? recallErt = null, Action<int>? approveErt = null, Action<int>? denyErt = null, bool allowApprove = false)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _recallErt = recallErt;
        _approveErt = approveErt;
        _denyErt = denyErt;

        var statusString = status switch
        {
            ErtGroupStatus.Approved => "Одобрено",
            ErtGroupStatus.Arrived => "Прибыло",
            ErtGroupStatus.Waiting => "На рассмотрении",
            ErtGroupStatus.Denied => "Отказано",
            ErtGroupStatus.Revoke => "Отозвано",
            _ => UnknownStatus
        };

        var groupString = Loc.GetString($"ert-group-name-{groupTitle}");

        if (status == ErtGroupStatus.Waiting)
        {
            DenyButton.Visible = allowApprove;
            ApproveButton.Visible = allowApprove;
            RecallButton.Visible = recallErt != null;
        }
        else
        {
            DenyButton.Visible = false;
            ApproveButton.Visible = false;
            RecallButton.Visible = false;
        }

        RecallButton.OnPressed += _ => OnRecallErt(index);
        ApproveButton.OnPressed += _ => OnApproveErt(index);
        DenyButton.OnPressed += _ => OnDenyErt(index);

        ArrivalTime.Visible = arrivalTime != TimeSpan.Zero;
        ArrivalTitle.Visible = arrivalTime != TimeSpan.Zero;
        ArrivalTime.SetMessage($"{arrivalTime:hh':'mm':'ss}");

        GroupName.SetMessage($"{groupString}");
        CalledTime.SetMessage($"{calledTime:hh':'mm':'ss}");
        Status.SetMessage($"{statusString}");
        Reason.SetMessage($"{reason}");
    }

    private void OnRecallErt(int index) => _recallErt?.Invoke(index);
    private void OnApproveErt(int index) => _approveErt?.Invoke(index);
    private void OnDenyErt(int index) => _denyErt?.Invoke(index);
}
