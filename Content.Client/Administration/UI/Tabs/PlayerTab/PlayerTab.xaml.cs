using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using static Content.Client.Administration.UI.Tabs.PlayerTab.PlayerTabHeader;

namespace Content.Client.Administration.UI.Tabs.PlayerTab
{
    [GenerateTypedNameReferences]
    public sealed partial class PlayerTab : Control
    {
        private const string ArrowUp = "↑";
        private const string ArrowDown = "↓";
        private readonly Color _altColor = Color.FromHex("#292B38");
        private readonly Color _defaultColor = Color.FromHex("#2F2F3B");
        private readonly AdminSystem _adminSystem;
        private readonly List<PlayerTabEntry> _players = new();

        private Header _headerClicked = Header.Username;
        private bool _ascending = true;

        public event Action<BaseButton.ButtonEventArgs>? OnEntryPressed;

        public PlayerTab()
        {
            _adminSystem = EntitySystem.Get<AdminSystem>();
            RobustXamlLoader.Load(this);
            RefreshPlayerList(_adminSystem.PlayerList);
            _adminSystem.PlayerListChanged += RefreshPlayerList;
            OverlayButtonOn.OnPressed += _adminSystem.AdminOverlayOn;
            OverlayButtonOff.OnPressed += _adminSystem.AdminOverlayOff;

            ListHeader.BackgroundColorPanel.PanelOverride = new StyleBoxFlat(_altColor);
            ListHeader.OnHeaderClicked += HeaderClicked;
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            _adminSystem.PlayerListChanged -= RefreshPlayerList;
            OverlayButtonOn.OnPressed -= _adminSystem.AdminOverlayOn;
            OverlayButtonOff.OnPressed -= _adminSystem.AdminOverlayOff;
        }

        private void RefreshPlayerList(IReadOnlyList<PlayerInfo> players)
        {
            foreach (var control in _players)
            {
                PlayerList.RemoveChild(control);
            }

            _players.Clear();

            var playerManager = IoCManager.Resolve<IPlayerManager>();
            PlayerCount.Text = $"Players: {playerManager.PlayerCount}";

            var sortedPlayers = new List<PlayerInfo>(players);
            sortedPlayers.Sort(Compare);

            UpdateHeaderSymbols();

            var useAltColor = false;
            foreach (var player in sortedPlayers)
            {
                var entry = new PlayerTabEntry(player.Username,
                    player.CharacterName,
                    player.StartingJob,
                    player.Antag ? "YES" : "NO",
                    new StyleBoxFlat(useAltColor ? _altColor : _defaultColor),
                    player.Connected);
                entry.PlayerUid = player.EntityUid;
                entry.OnPressed += args => OnEntryPressed?.Invoke(args);
                PlayerList.AddChild(entry);
                _players.Add(entry);

                useAltColor ^= true;
            }
        }

        private void UpdateHeaderSymbols()
        {
            ListHeader.ResetHeaderText();
            ListHeader.GetHeader(_headerClicked).Text += $" {(_ascending ? ArrowUp : ArrowDown)}";
        }

        private int Compare(PlayerInfo x, PlayerInfo y)
        {
            if (!_ascending)
            {
                (x, y) = (y, x);
            }

            return _headerClicked switch
            {
                Header.Username => Compare(x.Username, y.Username),
                Header.Character => Compare(x.CharacterName, y.CharacterName),
                Header.Job => Compare(x.StartingJob, y.StartingJob),
                Header.Antagonist => x.Antag.CompareTo(y.Antag),
                _ => 1
            };
        }

        private int Compare(string x, string y)
        {
            return string.Compare(x, y, StringComparison.OrdinalIgnoreCase);
        }

        private void HeaderClicked(Header header)
        {
            if (_headerClicked == header)
            {
                _ascending = !_ascending;
            }
            else
            {
                _headerClicked = header;
                _ascending = true;
            }

            RefreshPlayerList(_adminSystem.PlayerList);
        }
    }
}
